# -*- coding: utf-8 -*-
"""DZ1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S8SHdcsFGSgIbS5Z2yIYJzesQGSmBG24

# Домашнее задание №1
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/gdrive')

"""Загрузим данные"""

rlms_hse = '/content/gdrive/MyDrive/Colab Notebooks/rlms_hse.dta'
df = pd.read_stata(rlms_hse, convert_categoricals = False) 
df.head(3)

"""Переменные из датафрейма, которые будем использовать:
* u_age - количество полных лет;
* uh5   - пол респондента;
* um1   - вес в кг;
* um2   - рост в см;
* region - регион.
"""

data =  df[['u_age', 'uh5', 'um1', 'um2', 'region']]

data = data.rename(columns = {'u_age' : 'age', 'uh5': 'gender', 'um1' : 'weight', 'um2' : 'height'})

data.head()

"""Заменим большие значения на NaN"""

new_data = data.replace([99999997, 99999998, 99999999, 100000000], np.nan)
new_data.head()

new_data.info()

"""## Вариант 1:
* возраст - больше или равен 18;
* пол - мужской (1);
* регион - 138.

Произведем отбор данных по варианту
"""

new_data = new_data.loc[new_data['age'] >= 18]

new_data = new_data.loc[lambda new_data: new_data['gender'] == 1]

my_data = new_data.loc[lambda new_data: new_data['region'] == 138]
my_data.head()

"""Удалим наблюдения с отсутсвующими значениями"""

my_data = my_data.dropna()

my_data.info()

"""### Задание 1 - построить гистограммы"""

# Количество интервалов по Стёрджессу
number_of_bins_sturges = int(np.ceil(np.log2(len(my_data))) + 1)

# Количество интервалов по Скотту
from math import sqrt
bin_width_scott = np.std(my_data.weight) * ((24 * sqrt(np.pi) / len(my_data)) ** (1 / 3))
number_of_bins_scott = int(np.ceil((my_data.weight.max() - my_data.weight.min()) / bin_width_scott))

# Количество интервалов по Фридмену-Диаконису
q1 = my_data.weight.quantile(0.25)
q3 = my_data.weight.quantile(0.75)
iqr = q3 - q1
bin_width_fd = (2 * iqr) / (len(my_data.weight) ** (1 / 3))
bin_count = int(np.ceil((my_data.weight.max() - my_data.weight.min()) / bin_width_fd))

"""Построим гистограммы по весу"""

import matplotlib.pyplot as plt

x = my_data.age
y1 = my_data.weight
y2 = my_data.height
plt.figure(figsize=(20, 7))
plt.rcParams['font.size'] = '12'

plt.subplot(1, 3, 1)
plt.title("Значения веса респондентов (формула Стёрджесса)")
plt.xlabel("Вес респондентов")
plt.ylabel("Количество отсчетов")
plt.grid()
plt.hist(y1, bins = 'sturges')

plt.subplot(1, 3, 2)
plt.title("Значения веса респондентов (формула Скотта)")
plt.xlabel("Вес респондентов")
plt.ylabel("Количество отсчетов")
plt.grid()
plt.hist(y1, bins = 'scott')

plt.subplot(1, 3, 3)
plt.title("Значения веса респондентов (формула Фридмена-Диакониса)")
plt.xlabel("Вес респондентов")
plt.ylabel("Количество отсчетов")
plt.grid()
plt.hist(y1, bins = 'fd')

plt.tight_layout()
plt.show()

print(f"\033[1mКоличество интервалов по формуле Стёрджесса: {number_of_bins_sturges}           ",  \
      f"Количество интервалов по формуле Скотта: {number_of_bins_scott}          ", \
      f"Количество интервалов по формуле Фридмена-Диакониса: {bin_count}")

# Количество интервалов по Стёрджессу
number_of_bins_sturges_h = int(np.ceil(np.log2(len(my_data))) + 1)

# Количество интервалов по Скотту
bin_width_scott_h = np.std(my_data.height) * ((24 * sqrt(np.pi) / len(my_data)) ** (1 / 3))
number_of_bins_scott_h = int(np.ceil((my_data.height.max() - my_data.height.min()) / bin_width_scott_h))

# Количество интервалов по Фридмену-Диаконису
q1_h = my_data.height.quantile(0.25)
q3_h = my_data.height.quantile(0.75)
iqr_h = q3_h - q1_h
bin_width_fd_h = (2 * iqr_h) / (len(my_data) ** (1 / 3))
bin_count_h = int(np.ceil((my_data.height.max() - my_data.height.min()) / bin_width_fd_h))

"""Построим гистограммы по росту"""

plt.figure(figsize=(20, 7))
plt.rcParams['font.size'] = '12'

plt.subplot(1, 3, 1)
plt.title("Значения роста респондентов (формула Стёрджесса)")
plt.xlabel("Рост респондентов")
plt.ylabel("Количество отсчетов")
plt.grid()
plt.hist(y2, bins = 'sturges', color = 'g')

plt.subplot(1, 3, 2)
plt.title("Значения роста респондентов (формула Скотта)")
plt.xlabel("Рост респондентов")
plt.ylabel("Количество отсчетов")
plt.grid()
plt.hist(y2, bins = 'scott', color = 'g')

plt.subplot(1, 3, 3)
plt.title("Значения роста респондентов (формула Фридмена-Диакониса)")
plt.xlabel("Рост респондентов")
plt.ylabel("Количество отсчетов")
plt.grid()
plt.hist(y2, bins = 'fd', color = 'g')

plt.tight_layout()
plt.show()

print(f"\033[1mКоличество интервалов по формуле Стёрджесса: {number_of_bins_sturges_h}           ",  \
      f"Количество интервалов по формуле Скотта: {number_of_bins_scott_h}         ", \
      f"Количество интервалов по формуле Фридмена-Диакониса: {bin_count_h}")

"""### Задание 2 - получить основные характеристики выборки

Общие описательные характеристики
"""

my_data.describe()

"""Конкретные характеристики выборки"""

print(f"Минимальное значение веса: {my_data.weight.min()}")
print(f"Среднее значение веса: {my_data.weight.mean()}")
print(f"Максимальное значение веса: {my_data.weight.max()}")
print(f"Медиана веса: {my_data.weight.median()}")
print(f"Стандартное отклонение веса: {my_data.weight.std()}")

print(f"Минимальное значение роста: {my_data.height.min()}")
print(f"Среднее значение роста: {my_data.height.mean()}")
print(f"Максимальное значение роста: {my_data.height.max()}")
print(f"Медиана роста: {my_data.height.median()}")
print(f"Стандартное отклонение роста: {my_data.height.std()}")

"""### Задание 3 - выполнить проверку гипотезы о нормальности распределения

Для проверки гипотезы о нормальности распределения будем использовать критерии Шапиро-Уилка, Д'Агостино, Пирсона, Колмогорова-Смирнова с поправкой Лиллиефорса и Колмогорова-Смирнова
"""

import random
my_data_weight_100 = random.sample(list(my_data.weight), 100)
my_data_height_100 = random.sample(list(my_data.height), 100)
my_data_weight_300 = random.sample(list(my_data.weight), 300)
my_data_height_300 = random.sample(list(my_data.height), 300)

from scipy.stats import shapiro
_, p1 = shapiro(my_data.weight)

from scipy.stats import normaltest
_, p2 = normaltest(my_data.weight)

from scipy.stats import chisquare
_, p3 = chisquare(my_data.weight)

from statsmodels.stats.diagnostic import lilliefors
_, p4 = lilliefors(my_data.weight)

from scipy.stats import kstest
_, p5 = kstest(my_data.weight, 'norm')

_, p6 = shapiro(my_data.height)
_, p7 = normaltest(my_data.height)
_, p8 = chisquare(my_data.height)
_, p9 = lilliefors(my_data.height)
_, p10 = kstest(my_data.height, 'norm')

_, p11 = shapiro(my_data_weight_100)
_, p12 = normaltest(my_data_weight_100)
_, p13 = chisquare(my_data_weight_100)
_, p14 = lilliefors(my_data_weight_100)
_, p15 = kstest(my_data_weight_100, 'norm')

_, p16 = shapiro(my_data_height_100)
_, p17 = normaltest(my_data_height_100)
_, p18 = chisquare(my_data_height_100)
_, p19 = lilliefors(my_data_height_100)
_, p20 = kstest(my_data_height_100, 'norm')

_, p21 = shapiro(my_data_weight_300)
_, p22 = normaltest(my_data_weight_300)
_, p23 = chisquare(my_data_weight_300)
_, p24 = lilliefors(my_data_weight_300)
_, p25 = kstest(my_data_weight_300, 'norm')

_, p26 = shapiro(my_data_height_300)
_, p27 = normaltest(my_data_height_300)
_, p28 = chisquare(my_data_height_300)
_, p29 = lilliefors(my_data_height_300)
_, p30 = kstest(my_data_height_300, 'norm')

p_w = [p1, p2, p3, p4, p5]
p_h = [p6, p7, p8, p9, p10]
p_w_100 = [p11, p12, p13, p14, p15]
p_h_100 = [p16, p17, p18, p19, p20]
p_w_300 = [p21, p22, p23, p24, p25]
p_h_300 = [p26, p27, p28, p29, p30]
df = pd.DataFrame({'Weight': p_w, 'Height': p_h, 'Weight 300': p_w_300, 'Height 300': p_h_300, 'Weight 100': p_w_100, 'Height 100': p_h_100})
df2 = df.rename(index={0: 'Shapiro-Wilk', 1: 'D-Agostino', 2: 'Chisquare', 3: 'Lilliefors', 4: 'Kolmogorov-Smirnov'})

def style_variance(v, props=''):
    return props if v < 0.05 else None
s1 = df2.style.applymap(style_variance, props='color:red;')
s1

"""По вышеприведенной таблице можно сделать вывод, что гипотеза о нормальности распределения подтверждается только для набора данных роста в 100 значений.

## Вариант 1 (дополнительное задание):
* возраст - меньше 18;
* пол - мужской (1);
* регион - 138.
"""

dop_data = data.replace([99999997, 99999998, 99999999, 100000000], np.nan)

dop_data = dop_data.loc[dop_data['age'] < 18]

dop_data = dop_data.loc[lambda dop_data: dop_data['gender'] == 1]

my_dop_data = dop_data.loc[lambda dop_data: dop_data['region'] == 138]
my_dop_data.head()

my_dop_data = my_dop_data.dropna()

my_dop_data.info()

"""### Задание 1 - построить гистограммы"""

# Количество интервалов по Стёрджессу
number_of_bins_sturges_dop = int(np.ceil(np.log2(len(my_dop_data))) + 1)

# Количество интервалов по Скотту
bin_width_scott_dop = np.std(my_dop_data.weight) * ((24 * sqrt(np.pi) / len(my_dop_data)) ** (1 / 3))
number_of_bins_scott_dop = int(np.ceil((my_dop_data.weight.max() - my_dop_data.weight.min()) / bin_width_scott_dop))

# Количество интервалов по Фридмену-Диаконису
q1_dop = my_dop_data.weight.quantile(0.25)
q3_dop = my_dop_data.weight.quantile(0.75)
iqr_dop = q3_dop - q1_dop
bin_width_fd_dop = (2 * iqr_dop) / (len(my_dop_data.weight) ** (1 / 3))
bin_count_dop = int(np.ceil((my_dop_data.weight.max() - my_dop_data.weight.min()) / bin_width_fd_dop))

"""Построим гистограммы по весу"""

x_dop = my_dop_data.age
y1_dop = my_dop_data.weight
y2_dop = my_dop_data.height
plt.figure(figsize=(20, 7))
plt.rcParams['font.size'] = '12'

plt.subplot(1, 3, 1)
plt.title("Значения веса респондентов (формула Стёрджесса)")
plt.xlabel("Вес респондентов")
plt.ylabel("Количество отсчетов")
plt.grid()
plt.hist(y1_dop, bins = 'sturges', color = 'm')

plt.subplot(1, 3, 2)
plt.title("Значения веса респондентов (формула Скотта)")
plt.xlabel("Вес респондентов")
plt.ylabel("Количество отсчетов")
plt.grid()
plt.hist(y1_dop, bins = 'scott', color = 'm')

plt.subplot(1, 3, 3)
plt.title("Значения веса респондентов (формула Фридмена-Диакониса)")
plt.xlabel("Вес респондентов")
plt.ylabel("Количество отсчетов")
plt.grid()
plt.hist(y1_dop, bins = 'fd', color = 'm')

plt.tight_layout()
plt.show()

print(f"\033[1mКоличество интервалов по формуле Стёрджесса: {number_of_bins_sturges_dop}           ",  \
      f"Количество интервалов по формуле Скотта: {number_of_bins_scott_dop}          ", \
      f"Количество интервалов по формуле Фридмена-Диакониса: {bin_count_dop}")

# Количество интервалов по Стёрджессу
number_of_bins_sturges_h_dop = int(np.ceil(np.log2(len(my_dop_data))) + 1)

# Количество интервалов по Скотту
bin_width_scott_h_dop = np.std(my_dop_data.height) * ((24 * sqrt(np.pi) / len(my_dop_data)) ** (1 / 3))
number_of_bins_scott_h_dop = int(np.ceil((my_dop_data.height.max() - my_dop_data.height.min()) / bin_width_scott_h_dop))

# Количество интервалов по Фридмену-Диаконису
q1_h_dop = my_dop_data.height.quantile(0.25)
q3_h_dop = my_dop_data.height.quantile(0.75)
iqr_h_dop = q3_h_dop - q1_h_dop
bin_width_fd_h_dop = (2 * iqr_h_dop) / (len(my_dop_data) ** (1 / 3))
bin_count_h_dop = int(np.ceil((my_dop_data.height.max() - my_dop_data.height.min()) / bin_width_fd_h_dop))

"""Построим гистограммы по росту"""

plt.figure(figsize=(20, 7))
plt.rcParams['font.size'] = '12'

plt.subplot(1, 3, 1)
plt.title("Значения роста респондентов (формула Стёрджесса)")
plt.xlabel("Рост респондентов")
plt.ylabel("Количество отсчетов")
plt.grid()
plt.hist(y2_dop, bins = 'sturges', color = 'y')

plt.subplot(1, 3, 2)
plt.title("Значения роста респондентов (формула Скотта)")
plt.xlabel("Рост респондентов")
plt.ylabel("Количество отсчетов")
plt.grid()
plt.hist(y2_dop, bins = 'scott', color = 'y')

plt.subplot(1, 3, 3)
plt.title("Значения роста респондентов (формула Фридмена-Диакониса)")
plt.xlabel("Рост респондентов")
plt.ylabel("Количество отсчетов")
plt.grid()
plt.hist(y2_dop, bins = 'fd', color = 'y')

plt.tight_layout()
plt.show()

print(f"\033[1mКоличество интервалов по формуле Стёрджесса: {number_of_bins_sturges_h_dop}           ",  \
      f"Количество интервалов по формуле Скотта: {number_of_bins_scott_h_dop}         ", \
      f"Количество интервалов по формуле Фридмена-Диакониса: {bin_count_h_dop}")

"""### Задание 2 - получить основные характеристики выборки

Общие описательные характеристики
"""

my_dop_data.describe()

"""Конкретные характеристики выборки"""

print(f"Минимальное значение веса: {my_dop_data.weight.min()}")
print(f"Среднее значение веса: {my_dop_data.weight.mean()}")
print(f"Максимальное значение веса: {my_dop_data.weight.max()}")
print(f"Медиана веса: {my_dop_data.weight.median()}")
print(f"Стандартное отклонение веса: {my_dop_data.weight.std()}")

print(f"Минимальное значение роста: {my_dop_data.height.min()}")
print(f"Среднее значение роста: {my_dop_data.height.mean()}")
print(f"Максимальное значение роста: {my_dop_data.height.max()}")
print(f"Медиана роста: {my_dop_data.height.median()}")
print(f"Стандартное отклонение роста: {my_dop_data.height.std()}")

"""### Задание 3 - выполнить проверку гипотезы о нормальности распределения

Для проверки гипотезы о нормальности распределения будем использовать критерии Шапиро-Уилка, Д'Агостино, Пирсона, Колмогорова-Смирнова с поправкой Лиллиефорса и Колмогорова-Смирнова
"""

_, p_1 = shapiro(my_dop_data.weight)

_, p_2 = normaltest(my_dop_data.weight)

_, p_3 = chisquare(my_dop_data.weight)

_, p_4 = lilliefors(my_dop_data.weight)

_, p_5 = kstest(my_dop_data.weight, 'norm')

_, p_6 = shapiro(my_dop_data.height)
_, p_7 = normaltest(my_dop_data.height)
_, p_8 = chisquare(my_dop_data.height)
_, p_9 = lilliefors(my_dop_data.height)
_, p_10 = kstest(my_dop_data.height, 'norm')

p_w_dop = [p_1, p_2, p_3, p_4, p_5]
p_h_dop = [p_6, p_7, p_8, p_9, p_10]
df = pd.DataFrame({'Weight': p_w_dop, 'Height': p_h_dop})
df2 = df.rename(index={0: 'Shapiro-Wilk', 1: 'D-Agostino', 2: 'Chisquare', 3: 'Lilliefors', 4: 'Kolmogorov-Smirnov'})

def style_variance(v, props=''):
    return props if v < 0.05 else None
s1 = df2.style.applymap(style_variance, props='color:red;')
s1

"""По вышеприведенной таблице можно сделать вывод, что для возраста меньше 18 лет гипотеза о нормальности распределения не подтверждается ни для веса, ни для роста."""